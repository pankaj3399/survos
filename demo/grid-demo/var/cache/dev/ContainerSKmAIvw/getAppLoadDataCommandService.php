<?php

namespace ContainerSKmAIvw;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAppLoadDataCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Command\AppLoadDataCommand' shared autowired service.
     *
     * @return \App\Command\AppLoadDataCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/zenstruck/console-extra/src/Invokable.php';
        include_once \dirname(__DIR__, 4).'/vendor/zenstruck/console-extra/src/InvokableServiceCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/zenstruck/console-extra/src/ConfigureWithAttributes.php';
        include_once \dirname(__DIR__, 4).'/vendor/zenstruck/console-extra/src/RunsCommands.php';
        include_once \dirname(__DIR__, 4).'/vendor/zenstruck/console-extra/src/RunsProcesses.php';
        include_once \dirname(__DIR__, 4).'/src/Command/AppLoadDataCommand.php';

        $container->privates['App\\Command\\AppLoadDataCommand'] = $instance = new \App\Command\AppLoadDataCommand(($container->privates['debug.validator'] ?? self::getDebug_ValidatorService($container)), ($container->services['cache.app'] ?? self::getCache_AppService($container)));

        $instance->setInvokeContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'invoke:manager' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
            'invoke:serializer' => ['privates', 'serializer', 'getSerializerService', false],
        ], [
            'Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface' => '?',
            'invoke:manager' => '?',
            'invoke:serializer' => '?',
        ]))->withContext('App\\Command\\AppLoadDataCommand', $container));
        $instance->setName('app:load-data');
        $instance->setDescription('Load the congressional data');

        return $instance;
    }
}
