<?php

namespace Container57M1xJi;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBuildCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Stenope\Bundle\Command\BuildCommand' shared service.
     *
     * @return \Stenope\Bundle\Command\BuildCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/stenope/stenope/src/Command/StopwatchHelperTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/stenope/stenope/src/Command/BuildCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/stenope/stenope/src/Builder.php';

        $a = ($container->privates['stenope.build.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true));

        $container->privates['Stenope\\Bundle\\Command\\BuildCommand'] = $instance = new \Stenope\Bundle\Command\BuildCommand(new \Stenope\Bundle\Builder(($container->services['router'] ?? self::getRouterService($container)), ($container->privates['Stenope\\Bundle\\Routing\\RouteInfoCollection'] ?? self::getRouteInfoCollectionService($container)), ($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['twig'] ?? self::getTwigService($container)), ($container->privates['mime_types'] ?? self::getMimeTypesService($container)), ($container->privates['Stenope\\Bundle\\Builder\\PageList'] ??= new \Stenope\Bundle\Builder\PageList()), ($container->privates['Stenope\\Bundle\\Builder\\Sitemap'] ??= new \Stenope\Bundle\Builder\Sitemap()), (\dirname(__DIR__, 4).'/build'), [['src' => (\dirname(__DIR__, 4).'/public'), 'dest' => '.', 'fail_if_missing' => true, 'ignore_dot_files' => true, 'excludes' => ['*.php']]], ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $a), $a);

        $instance->setName('stenope:build');

        return $instance;
    }
}
