<?php

/**
 * TranslateController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * LibreTranslate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.11
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\TranslateApiInterface;
use OpenAPI\Server\Model\DetectionsInner;
use OpenAPI\Server\Model\ErrorResponse;
use OpenAPI\Server\Model\ErrorSlowDown;
use OpenAPI\Server\Model\LanguagesInner;
use OpenAPI\Server\Model\Translate;
use OpenAPI\Server\Model\TranslateFile;

/**
 * TranslateController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class TranslateController extends Controller
{

    /**
     * Operation detectPost
     *
     * Detect the language of a single text
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function detectPostAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['*/*'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $q = $request->request->get('q');
        $apiKey = $request->request->get('apiKey');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $q = $this->deserialize($q, 'AnyType', 'string');
            $apiKey = $this->deserialize($apiKey, 'AnyType', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($q, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($apiKey, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();


            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->detectPost($q, $apiKey, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Detections';
                    break;
                case 400:
                    $message = 'Invalid request';
                    break;
                case 403:
                    $message = 'Banned';
                    break;
                case 429:
                    $message = 'Slow down';
                    break;
                case 500:
                    $message = 'Detection error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation languagesGet
     *
     * Retrieve list of supported languages
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function languagesGetAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['*/*'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Validate the input values


        try {
            $handler = $this->getApiHandler();


            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->languagesGet($responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'List of languages';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation translateFilePost
     *
     * Translate file from a language to another
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function translateFilePostAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['*/*'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $file = $request->files->get('file');
        $source = $request->request->get('source');
        $target = $request->request->get('target');
        $apiKey = $request->request->get('apiKey');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $source = $this->deserialize($source, 'AnyType', 'string');
            $target = $this->deserialize($target, 'AnyType', 'string');
            $apiKey = $this->deserialize($apiKey, 'AnyType', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\File();
        $response = $this->validate($file, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($source, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($target, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($apiKey, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();


            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->translateFilePost($file, $source, $target, $apiKey, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Translated file';
                    break;
                case 400:
                    $message = 'Invalid request';
                    break;
                case 403:
                    $message = 'Banned';
                    break;
                case 429:
                    $message = 'Slow down';
                    break;
                case 500:
                    $message = 'Translation error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation translatePost
     *
     * Translate text from a language to another
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function translatePostAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['*/*'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $q = $request->request->get('q');
        $source = $request->request->get('source');
        $target = $request->request->get('target');
        $format = $request->request->get('format');
        $apiKey = $request->request->get('apiKey');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $q = $this->deserialize($q, 'AnyType', 'string');
            $source = $this->deserialize($source, 'AnyType', 'string');
            $target = $this->deserialize($target, 'AnyType', 'string');
            $format = $this->deserialize($format, 'AnyType', 'string');
            $apiKey = $this->deserialize($apiKey, 'AnyType', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($q, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($source, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($target, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($format, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("AnyType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($apiKey, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();


            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->translatePost($q, $source, $target, $format, $apiKey, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Translated text';
                    break;
                case 400:
                    $message = 'Invalid request';
                    break;
                case 403:
                    $message = 'Banned';
                    break;
                case 429:
                    $message = 'Slow down';
                    break;
                case 500:
                    $message = 'Translation error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return TranslateApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('translate');
    }
}
